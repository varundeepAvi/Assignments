# -*- coding: utf-8 -*-
"""05feb_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/129UPW8qohbnNg2ETjb63OeDHCtc-aGn9
"""



"""1. Write a Python script to display the various Date Time formats -
a) Current date and time
b) Current year
c) Month of year
d) Week number of the year
e) Weekday of the week
f) Day of year
g) Day of the month
h) Day of week


"""

import datetime

# Current date and time
current_date_time = datetime.datetime.now()
print("a) Current date and time:", current_date_time)

# Current year
current_year = current_date_time.year
print("b) Current year:", current_year)

# Month of year
month_of_year = current_date_time.strftime("%B")
print("c) Month of year:", month_of_year)

# Week number of the year
week_number = current_date_time.strftime("%U")
print("d) Week number of the year:", week_number)

# Weekday of the week
weekday = current_date_time.strftime("%A")
print("e) Weekday of the week:", weekday)

# Day of year
day_of_year = current_date_time.timetuple().tm_yday
print("f) Day of year:", day_of_year)

# Day of the month
day_of_month = current_date_time.day
print("g) Day of the month:", day_of_month)

# Day of week (Monday is 0 and Sunday is 6)
day_of_week = current_date_time.weekday()
print("h) Day of week:", day_of_week)

import datetime
curr_date_time =  datetime.datetime.now()
print("a) Current date and time is :",current_date_time )

current_year = current_date_time.year
print("b)  Current year is :", current_year)


current_month  = current_date_time.strftime("%B")
print("c) Month of year is :" ,current_month)


week_number  =  current_date_time.strftime("%U")
print("d) Week number of year is ", week_number)


week_day = current_date_time.strftime("%A")
print("e) Weekday of week is :", week_day)


day_of_year = current_date_time.timetuple().tm_yday
print("f) Day of year is :", day_of_year)


day_of_month = current_date_time.day
print("g) Day of Month is ", day_of_month)


day_of_week = current_date_time.weekday()
print("h) Day of week ", day_of_week)



""".Write a Python program to subtract five days from the current date.
Sample Date :
Current Date : 2015-06-22
5 days before Current Date : 2015-06-17
"""

from datetime import datetime,timedelta



current_date  = datetime.now()

result_date  = current_date -  timedelta(days = 5)


current_date_str = current_date.strftime("%Y-%m-%d")

result_date_str =  result_date.strftime("%y-%m-%d")


#Display the result

print("Current Date:", current_date_str)

print("5 days before Current_date :",result_date_str)

# 2 days 3 hrs 30 min before current time

result_date2 = current_date - timedelta(days = 2, hours = 3, minutes = 30)

#result_date2_str=  result_date2.strftime("%Y-%m-%d")

print("Current Date and time is ", current_date)
print("2 days ,3 hours and 30 min before current time is :, ", result_date2)



c`



"""3.Write a Python program to calculate the number of days between two date times.

"""

# strftime -  > datetime object to string
# strptime - > string to date_time object
from datetime import datetime

def  calculate_days_between_dates(start_date_time ,end_date_time):

    start_datetime =  datetime.strptime(start_date_time,"%Y-%m-%d %H:%M:%S")
    end_datetime  =  datetime.strptime(end_date_time,"%Y-%m-%d %H:%M:%S")

    time_diff = end_datetime - start_datetime

    days_diff = time_diff.days

    return days_diff


start_date_time =   "2024-01-01 12:00:00"
end_date_time = "2024-02-05 18:30:00"

days_diff = calculate_days_between_dates(start_date_time, end_date_time)

print(f"Number of days between {start_date_time } and {end_date_time}  : {days_diff}  days")



"""4. write a python program to read  an entire text file"""

file_path = "example.txt"


try:
     with open(file_path ,'r') as file :
       #Reading content of  file
        content = file.read()
        print("Existing File Content:")
        print(content)

except FileNotFoundError:
      print(f"File {file_path} not found. Creating a new file ")

      # creating new file and writing some content in it
      with open(file_path,'w') as file:
        new_content = "Hello this is new file `\n Created by Varundeep Singh"
        file.write(new_content)
        print("New File Created ")


#Reading the content of file
try:
    with open(file_path,'r') as file :
      new_content = file.read()
      print("Content of the file after creating and writing :")
      print(new_content)

except Exception as e:
     print(f"An error occured :{str(e)}")

"""5.Write a Python program to read first n lines of a file.

"""

def read_first_n_lines(file_path,n):
    lines = []
    try:
      with open(file_path,'r' ) as file:

         for _ in range(n):
                try:
                    line = next(file)
                    lines.append(line)
                except StopIteration:
                    # Break the loop if there are fewer lines than n
                    break



    except FileNotFoundError:
        return f'File {file_path} not found.'


    except Exception as e:
        return f"An Exception occured:{ str(e)}"

    return lines

file_path = "example.txt"

n =4

result= read_first_n_lines(file_path, n)

if isinstance(result, list):
   if len(result) < n :
    print(f"File has fewer than {n} lines ")

   print(f"First {len(result)} lines of file are ")

   for line in result:
        print(line.strip())

else :
   print(result)



""".Write a Python program to read last n lines of a file."""

def  read_last_n_lines(file_path, n):
    lines = []
    try:
        with  open(file_path,'r') as file :
           all_lines = file.readlines()

           start_index = max(0, len(all_lines) -n)


           lines = all_lines[start_index:]

    except FileNotFoundError:
        return f"File {file_path} not found ."

    except Exception as e:
        return f"An Exception Occured:{str(e)}"


    return lines



file_path = "example.txt"

n = 4

result =read_last_n_lines(file_path , n)

if isinstance( result, list):
   if len(result) < n:
     print(f"File has fewer than {n} lines.")

   print(f"Last {len(result)} lines of file are:")
   for line in result:
       print(line.strip())
else:
    print(result)

"""7.Write a Python program to get the file size of a plain file."""

import os
def get_file_size(file_path):
  try:
     file_size = os.path.getsize(file_path)
     return file_size

  except FileNotFoundError:
      return f"File {file_path } not exists "

  except Exception as e:
      return f"An Exception occured :", str(e)



file_path = "/content/example.txt"
result = get_file_size(file_path)

if isinstance(result , int ):
  print(f"  The size of file {file_path} is {result} bytes")
else :
  print(result)



"""Write a Python program that takes a text file as input and returns the number of words of a given text file.
Note: Some words can be separated by a comma with no space.

"""

def count_words(file_path):
  try:
      with open(file_path,'r') as file:
         content  = file.read()


         #Replace commas without spaces  with spaces
         content = content.replace(',',' ')

         #Split the content  into words

         words = content.split()

         num_words = len(words)

         return num_words

  except FileNotFoundError:
        return f'File {file_path} not found.'

  except Exception as e:
        return f"An exception occurred: {str(e)}"

# Example usage:
file_path = "example.txt"  # Replace with the path to your text file

result = count_words(file_path)

if isinstance(result, int):
    print(f"The number of words in the file '{file_path}' is: {result}")
else:
    print(result)



"""9.Write a Python program to generate 26 text files named A.txt, B.txt, and so on up to Z.txt.

"""

import  string


for letter in string.ascii_uppercase :
    file_name = f"{letter}.txt"

    with open(file_name,'w') as my_file:
      my_file.write("This is content of {file_name}")

print("Text files created successfully")



"""10.Write a Python program to read each row from a given csv file and print a list of strings.

"""

import csv

def read_csv(file_path):
    try:
        with open(file_path, 'r', newline='') as csv_file:
            # Create a CSV reader object
            csv_reader = csv.reader(csv_file)

            # Iterate over each row and print as a list of strings
            for row in csv_reader:
                print(row)

    except FileNotFoundError:
        print(f'File {file_path} not found.')

    except Exception as e:
        print(f"An exception occurred: {str(e)}")

# Example usage:
file_path = "example.csv"  # Replace with the path to your CSV file
read_csv(file_path)

"""11.Write a Python program to read a given CSV file having tab delimiter.

"""

import csv

def read_tab_delimited_csv(file_path):
    try:
        with open(file_path, 'r', newline='') as csv_file:
            # Create a CSV reader with tab as the delimiter
            csv_reader = csv.reader(csv_file, delimiter='\t')

            # Iterate over each row and print as a list of strings
            for row in csv_reader:
                print(row)

    except FileNotFoundError:
        print(f'File {file_path} not found.')

    except Exception as e:
        print(f"An exception occurred: {str(e)}")

# Example usage:
file_path = "example_tab_delimited.csv"  # Replace with the path to your CSV file
read_tab_delimited_csv(file_path)

"""12.Write a Python program that reads a CSV file and remove initial spaces, quotes around each entry and the delimiter.

"""

import csv

def clean_csv(file_path):
    try:
        with open(file_path, 'r', newline='') as csv_file:
            # Create a CSV reader with a comma as the delimiter
            csv_reader = csv.reader(csv_file)

            # Iterate over each row, clean entries, and print as a list of strings
            for row in csv_reader:
                cleaned_row = [entry.strip().strip('"') for entry in row]
                print(cleaned_row)

    except FileNotFoundError:
        print(f'File {file_path} not found.')

    except Exception as e:
        print(f"An exception occurred: {str(e)}")

# Example usage:
file_path = "example.csv"  # Replace with the path to your CSV file
clean_csv(file_path)

"""13.Write a Python program to read specific columns of a given CSV file and print the content of the columns.

"""

import csv

def read_specific_columns(file_path, columns):
    try:
        with open(file_path, 'r', newline='') as csv_file:
            # Create a CSV reader
            csv_reader = csv.reader(csv_file)

            # Get the header row to determine column indices
            header = next(csv_reader)

            # Create a list of column indices to extract
            column_indices = [header.index(column) for column in columns]

            # Print the header for the selected columns
            selected_header = [header[i] for i in column_indices]
            print(selected_header)

            # Iterate over each row, extract specific columns, and print the content
            for row in csv_reader:
                selected_columns = [row[i] for i in column_indices]
                print(selected_columns)

    except FileNotFoundError:
        print(f'File {file_path} not found.')

    except Exception as e:
        print(f"An exception occurred: {str(e)}")

# Example usage:
file_path = "example.csv"  # Replace with the path to your CSV file
desired_columns = ["Name", "Age", "City"]  # Replace with the column names you want to extract
read_specific_columns(file_path, desired_columns)