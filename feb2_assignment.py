# -*- coding: utf-8 -*-
"""feb2_assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EmHRsr-Tu6Xfoo913caqAtwDtlPxjFxj
"""



""".Write a Python program to create a class and display the namespace of that class.

"""

class Person:

  def __init__(self, name, age):
     self.name = name
     self.age = age


  def personDetail(self):
     print("Name  = " +self.name + " and age = " + age)





p1= Person("Raman",25)

p2 = Person("Varun",25)

print(Person.__dict__)

print(p1.__dict__)
print(p2.__dict__)
print(p1.__dict__["name"])

"""
2.Write a Python program to create an instance of a specified class and display the namespace of the said instance.
"""

class Person:

  def __init__(self, name, age):
     self.name = name
     self.age = age


  def personDetail(self):
     print("Name  = " +self.name + " and age = " + age)





p1= Person("Raman",25)

p2 = Person("Varun",25)

#print(Person.__dict__)

print(p1.__dict__)
print(p2.__dict__)
print(p1.__dict__["name"])

"""3.Write a Python program to create two empty classes, Student and Marks. Now create some instances and check whether they are instances of the said classes or not. Also, check whether the said classes are subclasses of the built-in object class or not.

"""

class Student:
   pass

class Marks:
   pass


student_instance = Student()
marks_instance = Marks()

is_student_instance =  isinstance(student_instance, Student)
is_marks_instance_of = isinstance(marks_instance, Marks)


is_student_subclass_of_object =  issubclass(Student, object)
is_marks_subclass_of_object = issubclass(Marks, object)

print(f"Is student_instance an instance of Student class? {is_student_instance}")
print(f"Is marks_instance an instance of Marks class? {is_marks_instance_of}")

print(f"Is Student class a subclass of object? {is_student_subclass_of_object}")
print(f"Is Marks class a subclass of object? {is_marks_subclass_of_object}")



"""4. .Write a Python class named Student with two attributes student_id, student_name. Add a new attribute student_class and display the entire attribute and the values of the class. Now remove the student_name attribute and display the entire attribute with values."""

class Student:
  def __init__(self, student_id, student_name):
     self.student_id = student_id
     self.student_name = student_name

  def  __str__(self):
     print(f"Name is {self.student_name} and Id is {self.student_id}")




student_instance = Student(1,"Varundeep")

print("Student Attributes")
print(student_instance.__dict__)

student_instance.student_class = "Python"

print("Student Attributes after adding attribute for class")
print( student_instance.__dict__ )


del student_instance.student_name



print("After Removing  student Name attribute")
print(student_instance.__dict__)



"""
5.Write a Python class to check the validity of a string of parentheses, '(', ')', '{', '}', '[' and ']. These brackets must be closed in the correct order, for example "()" and "()[]{}" are valid but "[)", "({[)]" and "{{{" are invalid.
"""

str1 = input("Enter String of Paranthesis")

stack = []



def  checkValidBraces(str1):
 for item in str1:

  if  len(stack) == 0 :
     if  item == '(' or item == '{' or item == '[':
       stack.append(item)
     else :
       return False

  elif item == ')' or item == ']' or  item == '}':

       if item == ')' and stack[-1] == '(' :
        stack.pop()

       elif item == ']' and stack[-1] == '[':
         stack.pop()

       elif item == '}' and stack[-1] == '{':
         stack.pop()

       else:
         return False

  else:
      stack.append(item)

 if len(stack ) > 0 :
    return False
 else :
    return True


if checkValidBraces(str1):
    print("String  is Balanced")
else:
  print("String is not Balanced")

class BracketValidator:
   def __init__(self):
     self.opening_brackets ={ '(', '[', '{'}
     self.closing_brackets ={ ')', ']', '}'}

     self.matching_brackets= { '(' : ')',
                               '{' : '}',
                                '[': ']' }


   def is_valid(self,s):
     stack =[]
     for bracket in s:
       if bracket in self.opening_brackets:
          stack.append(bracket)
       elif bracket in self.closing_brackets:
         if not stack or  self.matching_brackets[stack.pop()] != bracket:
            return False

     return not stack

str1 = input("Enter String ")
validator = BracketValidator()
if validator.is_valid(str1):
   print("It is a valid String ")
else :
   print("It is not a Valid String")

"""6.Write a Python class Employee with attributes like emp_id, emp_name, emp_salary, and emp_department and methods like calculate_emp_salary, emp_assign_department, and print_employee_details.

Sample Employee Data:
"ADAMS", "E7876", 50000, "ACCOUNTING"
"JONES", "E7499", 45000, "RESEARCH"
"MARTIN", "E7900", 50000, "SALES"
"SMITH", "E7698", 55000, "OPERATIONS"
Use 'assign_department' method to change the department of an employee.
Use 'print_employee_details' method to print the details of an employee.
Use 'calculate_emp_salary' method takes two arguments: salary and hours_worked, which is the number of hours worked by the employee. If the number of hours worked is more than 50, the method computes overtime and adds it to the salary. Overtime is calculated as following formula:
overtime = hours_worked â€“ 50
Overtime amount = (overtime * (salary / 50)
"""

class Employee:

   def __init__(self, emp_name, emp_id, emp_salary, emp_dept):
       self.emp_name= emp_name
       self.emp_id = emp_id
       self.emp_salary = emp_salary
       self.emp_dept = emp_dept



   def print_employee_details(self):
      print("Details of employee is as follow :-")

      print("Emp_name = ", self.emp_name)
      print("Emp_id = ", self.emp_id)
      print("Emp_salary = ", self.emp_salary)
      print("Emp_dept = ", self.emp_dept)


   def assign_department(self,dept):
        self.emp_dept = dept



   def emp_salary(self, salary, workedHours ):
      overtime  = 0
      if workedHours > 50:
          overtime = workedHours - 50

      self.salary =  salary + (overtime * (salary / 50))

      print("Salary of Employee = ", self.salary)

"""
Sample Employee Data: "ADAMS", "E7876", 50000, "ACCOUNTING" "JONES", "E7499", 45000, "RESEARCH" "MARTIN", "E7900", 50000, "SALES" "SMITH", "E7698", 55000,
"""
e1 = Employee("ADAMS","E7876", 50000, "ACCOUNTING")
e2 = Employee("JONES","E7499", 45000, "RESEARCH")
e3 = Employee("MARTIN","E7900", 50000, "SALES")
e4 = Employee("SMITH","E7698", 55000, "OPERATIONS")


print(e1.__dict__)
print(e2.__dict__)
print(e3.__dict__)
print(e4.__dict__)

print(Employee.__dict__)

"""
7.Write a Python class Restaurant with attributes like menu_items, book_table, and customer_orders, and methods like add_item_to_menu, book_tables, and customer_order.

Perform the following tasks now:
Now add items to the menu.
Make table reservations.
Take customer orders.
Print the menu.
Print table reservations.
Print customer orders.
Note: Use dictionaries and lists to store the data."""

class Restaurant:

   def __init__(self):
     self.menu_items   = {}
     self.booked_tables = []
     self.customer_orders = []


   def  add_item_to_menu(self, item_name, item_price):
     self.menu_items[item_name] = item_price


   def book_table(self,table_number):
     if table_number not in self.booked_tables:
       self.booked_tables.append(table_number)
       print(f"Table {table_number } has been booked")
     else :
       print(f"Table { table_number } is already booke.Please Choose another")

   def customer_order(self, table_number ,items):
     order = {'table_number ' : table_number,
              'items' : items }

     self.customer_orders.append(order)
     print(f"Order for Table {table_number} : {','.join(items)}")

     def print_menu(self):
     print("Menu:")

     for item, price in self.menu_items.items() :
        print(f"{item} : ${price}")


   def print_booked_tables(self):
     print("Booked_tables:",' '.join(map(str,self.booked_tables)))



   def print_customer_orders(self):
     print("Customer Orders:-")
     for order in self.customer_orders:
       print(f"Table {order['table_number']} ordered :{ ','.join(order['items']) }")




restaurant = Restaurant()


restaurant.add_item_to_menu("Burger",50)
restaurant.add_item_to_menu("Pizza",200)
restaurant.add_item_to_menu("Salad",100)


restaurant.book_table(1)

restaurant.book_table(2)


restaurant.book_table(1)


restaurant.customer_order(1 , ["Burger", "Pizza"])
restaurant.customer_order(2 , ["Salad"])


restuarant.print_menu()


restaurant.print_booked_tables()

restaurant.print_customer_orders()

"""
8.Write a Python class Inventory with attributes like item_id, item_name, stock_count, and price, and methods like add_item, update_item, and check_item_details.
Use a dictionary to store the item details, where the key is the item_id and the value is a dictionary containing the item_name, stock_count, and price


"""

class Inventory:


    def __init__(self):
         self.items = { }




    def add_item(self, item_id, item_name, stock_count, price ):

       if item_id not in self.items:
          self.items[item_id] = {
               'item_name' : item_name,
               'stock_count' : stock_count,
               'price' : price
          }

          print(f"Item added:{item_name}(Id: {item_id})")
       else :
         print(f"Item with Id {item_id} already exists . Use Update_item to modify details")


    def update_item(self, item_id , new_stock_count = None , new_price = None):
      if  item_id in self.items:
        item = self.items[item_id]
        if  new_stock_count is not None :
           item['stock_count'] =  new_stock_count

        if new_price is not None:
            item['price'] = new_price
            print (f" Item Details Updated: {item['item_name']} (ID : {item_id})")
        else :
           print(f"Item with ID {item_id} does not exists . Use add_item to add a new Item.")


    def  check_item_details(self, item_id):
      if item_id  in self.items:
         item = self.items[item_id]
         print(f"Item Details for {item['item_name']} (Id :{item_id}):")
         print(f"Stock Count :{item['stock_count']}")
         print(f"Price : ${item['price']}")
      else :
         print(f"Item with Id {item_id } does not exists in  inventory.")




#Example
inventory = Inventory()

#adding items to inventory
inventory.add_item(1, "Laptop", 10, 80000)
inventory.add_item(2, "Mouse", 50 ,200)

#updating item details
inventory.update_item(1, new_stock_count=8 ,new_price = 75000)

inventory.check_item_details(1)

inventory.check_item_details(3)

