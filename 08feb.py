# -*- coding: utf-8 -*-
"""08feb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-_Sf-4gVRpBLWf18aajS_ARXaj02o-P_
"""



"""1.Write a Python function that takes two parameters, numerator and denominator, and returns the result of the division. However, handle the case where the denominator is zero by using a try-except block. In the except block, print an error message and return None"""

def doDivision(numerator, denominator):

        try:
         result = numerator / denominator
         print(f"Result  of {numerator} / {denominator} = {result}")
        except ZeroDivisionError as e:
          print(str(e) + "Exception , do not take Denominator as 0")
          return None



numerator = int(input("Enter Numerator Value: "))
denominator= int(input("Enter Denominator Value: "))

doDivision(numerator , denominator)

"""2.Create a function that reads the content of a file. Use a try-except block to handle the case where the file does not exist. In the except block, print an error message and return an empty string."""

def readFile(file_path):
  content = ''
  try:
     with open(file_path) as file:
      content = file.read()
     return content

  except FileNotFoundError as e:
    return "File not Found :{}".format(e.filename)

file_ = input("Enter File Name ")
result =readFile(file_)
print(result)



"""3.Define a custom exception class called InvalidInputError. Write a function that takes user input (an integer) and raises this custom exception if the input is not a positive integer. Use a try-except block to catch this custom exception and print an error message.

"""

class  InvalidInputError(Exception):
    def __init(self, number ,msg = "Your Typed number is not Positive") :
           self.number = number
           self.msg = msg








try:
   n  = int(input("Enter a Number"))
   if n <= 0 :
       raise InvalidInputError(n )
   else :
     print(f"You Typed {n}")

except InvalidInputError as e:

   #print(f"You typed {e.number} is  not positive ")
   print(e.msg)
   #print(e.message)
   #print(str(e))

class InvalidInputError(Exception):
    def __init__(self, number, msg="Your Typed number is not Positive"):
        self.number = number
        self.msg = msg  # or self.message = msg

try:
    n = int(input("Enter a Number: "))
    if n <= 0:
        raise InvalidInputError(n)
    else:
        print(f"You Typed {n}")

except InvalidInputError as e:
    print(e.msg)  # Access the correct attribute name
    print(e.number)
    #print(e.args)

# Using any() with a list
my_list = [False, False, True, False]
print(any(my_list))  # Output: True

# Using any() with a tuple
my_tuple = (0, '', [], False)
print(any(my_tuple))  # Output: False

# Using any() with a generator expression
my_string = "HelloWorld"
print(any(char.isupper() for char in my_string))  # Output: True

print(any(char.isupper() for char in my_string))

"""4.Create a function that validates a user's password. The password must satisfy the following conditions:

At least 8 characters long
Contains at least one uppercase letter
Contains at least one digit

"""

def validPassword(passwd):

   if len(passwd)>=8 and  any(char.isupper() for char in passwd) and any(char.isdigit() for char in passwd) :
      return True
   else :
     return False


passwd = input("Enter Password")
if validPassword(passwd):
   print("Valid Password")
else :
   print("Invalid Password")



"""6.Write a function that accepts a number as input and uses a custom exception AssertionError to raise an error if the number is negative. Use an assert statement to check this condition"""

class  NegativeNumberError(AssertionError):
     pass

def check_positive_number(number):
    assert  number >= 0 ,"Number must be positive, hi"
    return number

try:
   num = int(input("Enter a number: "))
   result = check_positive_number(num)
   print("The number is ",result)

except AssertionError as e:
    print("Error",e)

except ValueError:
  print("Invalid Input.Please enter a valid number")

"""
5.URL Parsing
Create a function that parses a URL and extracts the protocol (http or https), domain, and path. Define a custom exception InvalidURLError and raise it if the URL does not start with "http://" or "https://".
"""

class  InvalidURLError(ValueError):
  pass

def parse_url(url):
   if url.startswith("http://"):
        protocol = "http"
        url = url[len("http://"):]

   elif  url.startswith("https://"):
     protocol = "https"
     url = url[len("https://"):]
   else :
      raise InvalidURLError("Invalid URL Protocal")


   try:
     domain,path = url.split('/',1)
   except ValueError:
       domain = url
       path = ''

   return protocol, domain ,path

try:
    url = input("Enter a URL:")

    protocol, domain, path  = parse_url(url)
    print("Protocol:", protocol)
    print("Domain: ", domain)
    print("Path:",  path)

except InvalidURLError as e:
  print("Error:",e)

