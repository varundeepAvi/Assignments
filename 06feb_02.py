# -*- coding: utf-8 -*-
"""06feb_02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b_SNPUfLJ24MI3KPVEDyS0r6xv5QaSDp

1. Copy content of one file to another
"""

def copy_file( source_path, destination_path ):
   try:
       with open(source_path,'r') as source_file:
         content = source_file.read()


       with  open(destination_path,'w') as destination_file:
           destination_file.write(content)

       print(f"File content successfully  copied from FILE {source_path} to FILE {destination_path}.")
   except FileNotFoundError:
    print("One or both of the specified files not found.")
   except Exception as e:
       print(f"An error occurred: {e}")


source_file_path = '/content/abc.txt'
destination_file_path ='/content/copiedd.txt '

copy_file(source_file_path, destination_file_path)

from google.colab import drive
drive.mount('/content/drive')

def add_files_content(file1_path, file2_path):
   try:
       with open(file1_path,'r') as file1,  open(file2_path, 'a+') as file2:
           lines_file1 = file1.readlines()
           lines_file2 = file2.readlines()

           file2.seek(0)
           file2.truncate()  # Truncate the content of file2


           for line1,line2 in zip(lines_file1, lines_file2):
               combined_line = f"{line1.strip()}{line2.strip()}\n"
               file2.write(combined_line)

           for line1  in lines_file1[len(lines_file2):]:
              combined_line = f'{line1.strip()}\n'
              file2.write(combined_line)

           for line2  in lines_file2[len(lines_file1):]:
              combined_line = f'{line2.strip()}\n'
              file2.write(combined_line)


           print(f"Files successfully combined and content saved to '{file2_path}'.")
   except FileNotFoundError:
        print("One or more of the specified files not found.")
   except Exception as e:
        print(f"An error occurred: {e}")

# Example usage
file1_path = '/content/abc.txt'
file2_path = '/content/def.txt'

add_files_content(file1_path, file2_path)



|

""".Write a Python program to write 10 random numbers into a file. Read the file and then sort the numbers and then store it to another file.

"""

import random

def  write_random_numbers(file_path):
  with open(file_path,'w') as file:
    random_numbers = [random.randint(1,100) for _ in range(10)]
    file.write('\n'.join(map(str,random_numbers)))


def sort_and_write(file_path,output_path):
  with open(file_path, 'r') as file:
      numbers =[int(line.strip()) for line in file]

  sorted_numbers = sorted(numbers)

  with open(output_path,'w') as output_file:
     output_file.write('\n'.join(map(str,sorted_numbers)))


input_file_path = '/content/random_numbers.txt'
output_file_path = '/content/sorted_numbers.txt'

# Write 10 random numbers to the file
write_random_numbers(input_file_path)

# Read the file, sort the numbers, and write to another file
sort_and_write(input_file_path, output_file_path)

print(f"Random numbers written to '{input_file_path}' and sorted numbers saved to '{output_file_path}'.")

"""4.Write a program to read through the mbox-short.txt and
figure out the distribution by hour of the day for each of the messages.
You can pull the hour out from the 'From ' line by finding the time
and then splitting the string a second time using a colon.
From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
Once you have accumulated the counts for each hour, print out the counts,
sorted by hour as shown below. Note that the autograder
does not have support for the sorted() function.
"""

hour_counts= {}


with open('/content/drive/MyDrive/Colab Notebooks/mbox-short.txt','r')as file:
   for line in file:
    if line.startswith('From '):
       words =line.split()

       time_str =words[5]

       hour = time_str.split(':')[0]


       hour_counts[hour] = hour_counts.get(hour,0 )+1


   for  hour in sorted(hour_counts.keys()):
     print(f"{hour} :-> {hour_counts[hour]}")

""".Write a function which count number of lines and number of words in a text. All the files are in the data the folder: a) Read obama_speech.txt file and count number of lines and words b) Read michelle_obama_speech.txt file and count number of lines and words c) Read donald_speech.txt file and count number of lines and words d) Read melina_trump_speech.txt file and count number of lines and words

"""

def count_lines_and_words(filename):
   try:
      with open(filename,'r')as file:

         lines = file.readlines()

         num_lines = len(lines)

         num_words = sum(len(line.split()) for line in lines )


         print(f"File: {filename}")
         print(f"Number of lines: {num_lines}")
         print(f"Number of words: {num_words}\n")

   except FileNotFoundError:
        print(f"File '{filename}' not found.")
   except Exception as e:
        print(f"An error occurred: {e}")

# List of filenames to process
file_list = ['/content/drive/MyDrive/Colab Notebooks/obama_speech.txt', '/content/drive/MyDrive/Colab Notebooks/michelle_obama_speech.txt', '/content/drive/MyDrive/Colab Notebooks/donald_speech.txt', '/content/drive/MyDrive/Colab Notebooks/melania_trump_speech.txt']


# Process each file in the list
for filename in file_list:
    count_lines_and_words(filename)



"""6.Find the most common words in the English language. Call the name of your function find_most_common_words, it will take two parameters - a string or a file and a positive integer, indicating the number of words. Your function will return an array of tuples in descending order. Check the output

7.Write a program that computes the net amount of a bank account based a transaction log from console input. The transaction log format is shown as following: D 100 W 200

D means deposit while W means withdrawal. Suppose the following input is supplied to the program: D 300 D 300 W 200 D 100 Then, the output should be: 500
"""

def compute_net_amount(transaction_logs):
    net_amount = 0

    if len(transaction_logs) % 2 != 0:
        raise ValueError("Invalid number of elements in the transaction_logs list.")

    # Iterate over pairs of action and amount
    for i in range(0, len(transaction_logs), 2):
        action, amount = transaction_logs[i], int(transaction_logs[i + 1])

        if action == 'D':
            net_amount += amount
        elif action == 'W':
            net_amount -= amount

    return net_amount

if __name__ == "__main__":
    # Get transaction logs from console input
    transaction_input = input("Enter transaction logs (e.g., D 300 D 300 W 200 D 100): ")

    transactions = transaction_input.split(' ')

    # Compute and print the net amount
    net_amount = compute_net_amount(transactions)
    print(f"Net amount: {net_amount}")

""".Assuming that we have some email addresses in the "username@companyname.com" format, please write program to print the company name of a given email address. Both user names and company names are composed of letters only.

Example: If the following email address is given as input to the program:

john@google.com

Then, the output of the program should be:

google

In case of input data being supplied to the question, it should be assumed to be a console input.

"""

def extract_company_name(email):
     parts = email.split('@')

     if len(parts)== 2  and parts[1].count('.') >= 1:
      domain_parts = parts[1].split('.')

      company_name  = domain_parts[0]
      print(company_name)

     else:
        print("Invalid Email Address format.")


if __name__== '__main__':
   email_address  = input("Enter an Email Address: ")

   extract_company_name(email_address)



""".Find the most common words in the English language. Call the name of your function find_most_common_words, it will take two parameters - a string or a file and a positive integer, indicating the number of words. Your function will return an array of tuples in descending order. Check the output"""

import re
from collections  import Counter

def find_most_common_words(input_data, num_words):

     if isinstance(input_data,str) and input_data.endswith('.txt'):
        with open(input_data , 'r') as file:
            text = file.read()

     elif isinstance(input_data,str):
            text = input_data
     else :
       raise ValueError("Invalid input_data. Please either provide a string or file")

     words = re.findall(r'\b\w+\b',text.lower())

     word_counts =  Counter(words)


     most_common_words = word_counts.most_common(num_words)

     return most_common_words


text_data = "This is a sample text. This text contains sample words."
result = find_most_common_words(text_data, 3)
print(result)

# Example usage with a file
file_path = "/content/sample_text.txt"  # Replace with the actual file path
result_file = find_most_common_words(file_path, 5)
print(result_file)

